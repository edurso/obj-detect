import cv2
import numpy
import math
from enum import Enum
import matplotlib.pyplot as plt

imageBasePath = r'C:\Users\sdtul\Data\Grip_stuff'


class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__blur_type = BlurType.Box_Blur
        self.__blur_radius = 0.0

        self.blur_output = None

        self.__rgb_threshold_input = self.blur_output
        self.__rgb_threshold_red = [0.0, 55.0]
        self.__rgb_threshold_green = [23.0, 107.0]
        self.__rgb_threshold_blue = [0.0, 38.0]

        self.rgb_threshold_output = None

        self.__find_contours_input = self.rgb_threshold_output
        self.__find_contours_external_only = False

        self.find_contours_output = None

        self.__filter_contours_contours = self.find_contours_output
        self.__filter_contours_min_area = 175.0
        self.__filter_contours_min_perimeter = 134
        self.__filter_contours_min_width = 0
        self.__filter_contours_max_width = 100
        self.__filter_contours_min_height = 0
        self.__filter_contours_max_height = 1000
        self.__filter_contours_solidity = [0, 100]
        self.__filter_contours_max_vertices = 1000000
        self.__filter_contours_min_vertices = 0
        self.__filter_contours_min_ratio = 0
        self.__filter_contours_max_ratio = 100000
        self.filter_contours_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        Blur_debug = False
        
        if Blur_debug:
            plt.figure (100)
            plt.clf()
            plt.imshow(source0)
            plt.title("RGB")
            plt.draw()
            plt.show()
            plt.pause(1)
        
        
        Rgb_debug = True
        # Step RGB_Threshold0:
        self.__rgb_threshold_input = source0
        (self.rgb_threshold_output) = self.__rgb_threshold(self.__rgb_threshold_input, self.__rgb_threshold_red, self.__rgb_threshold_green, self.__rgb_threshold_blue)
        if Rgb_debug :  
            plt.figure (5)
            plt.clf()
            plt.imshow(self.rgb_threshold_output)
            plt.title("RGB")
            plt.draw()
            plt.show()
        
        # Step Find_Contours0:
        self.__find_contours_input = self.rgb_threshold_output
        (self.find_contours_output) = self.__find_contours(self.__find_contours_input, self.__find_contours_external_only)
        
  
        contours = self.find_contours_output
        #print("Number of contours = " + str(len(contours)))     
        
        centers = []
      
        
        tempImg = numpy.zeros(source0.shape, dtype = numpy.uint8)
        
        #im2, contours, hierarchy = cv2.findContours(tempImg,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
        #cv2.drawContours(im2, contours, -1, (0,0,255), 3)
        
        
        
        cv2.drawContours(tempImg, contours, -1, (0, 255, 0), 3)

        
        
        for cnt in contours:
            
                        
            x,y,w,h = cv2.boundingRect(cnt)
            
            if (w > 0) and (w < 1000) and (h < 10000) and (h > 0):
                
                x+=1
                
                # start the iteration with just the image with no lables

                tempTempImage = tempImg
                

                
                cx = x+int(numpy.floor(w/2))
                cy = y+int(numpy.floor(h/2))
                
                centers.append([cx,cy])
                  
                cv2.circle(tempTempImage, (cx, cy), 7, (255, 255, 255), -1)
                cv2.putText(tempTempImage, "center", (cx - 20, cy - 20),
          		cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
                newWidth = 0
                
                imagePath = str(imageBasePath) + str(x) + "_W" + str(w) +"_H" + str(h) + ".png"
                
                cv2.imwrite(imagePath,tempTempImage)
                
                #print(str(imagePath) + "width: " + str(newWidth) + "height: " + str(h))
                print(str(imagePath))
                
              
            
    
            #area = cv2.contourArea(cnt)
            #perimeter = cv2.arcLength(cnt,True)
            
            #print("the area is", area)
            #print("the perimeter is", perimeter)
            
                
         
        plt.figure(78)
        plt.clf()
        imgplot = plt.imshow(tempImg)
        if (len(centers)>1):
            center = numpy.mean(centers,0)
            plt.plot(center[0],center[1],'bx')
        plt.title("plot")
        plt.draw()
        plt.show()

    @staticmethod
    def __blur(src, type, radius):
        """Softens an image using one of several filters.
        Args:
            src: The source mat (numpy.ndarray).
            type: The blurType to perform represented as an int.
            radius: The radius for the blur as a float.
        Returns:
            A numpy.ndarray that has been blurred.
        """
        if(type is BlurType.Box_Blur):
            ksize = int(2 * round(radius) + 1)
            return cv2.blur(src, (ksize, ksize))
        elif(type is BlurType.Gaussian_Blur):
            ksize = int(6 * round(radius) + 1)
            return cv2.GaussianBlur(src, (ksize, ksize), round(radius))
        elif(type is BlurType.Median_Filter):
            ksize = int(2 * round(radius) + 1)
            return cv2.medianBlur(src, ksize)
        else:
            return cv2.bilateralFilter(src, -1, round(radius), round(radius))

    @staticmethod
    def __rgb_threshold(input, red, green, blue):
        """Segment an image based on color ranges.
        Args:
            input: A BGR numpy.ndarray.
            red: A list of two numbers the are the min and max red.
            green: A list of two numbers the are the min and max green.
            blue: A list of two numbers the are the min and max blue.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2RGB)
        return cv2.inRange(out, (red[0], green[0], blue[0]),  (red[1], green[1], blue[1]))

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy =cv2.findContours(input, mode=mode, method=method)
        return contours

    @staticmethod
    def __filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
                        min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                        min_ratio, max_ratio):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x,y,w,h = cv2.boundingRect(contour)
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            if (cv2.contourArea(hull)>0):
                solid = 100 * area / cv2.contourArea(hull)
                if (solid < solidity[0] or solid > solidity[1]):
                    continue
                if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                    continue
                ratio = (float)(w) / h
                if (ratio < min_ratio or ratio > max_ratio):
                    continue
                output.append(contour)
        return output


BlurType = Enum('BlurType', 'Box_Blur Gaussian_Blur Median_Filter Bilateral_Filter')

